{"version":3,"sources":["Word.js","App.js","serviceWorker.js","index.js"],"names":["Word","react_default","a","createElement","className","src","this","props","image","alt","writer","title","word","Component","words","id","App","renderWords","map","src_Word_0","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAqBeA,gMAhBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,KAAKC,MAAMC,MAAOC,IAAKH,KAAKC,MAAMG,OAAQC,MAAOL,KAAKC,MAAMG,OAAQN,UAAU,iBAE5FH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAKG,KAAKC,MAAMG,QAChBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVE,KAAKC,MAAMK,eAVjBC,cCEbC,EACF,CACI,CAACC,GAAK,IAAKL,OAAS,iCAASE,KAAM,yCAAYJ,MAAQ,iFACvD,CAACO,GAAK,IAAKL,OAAS,qBAAOE,KAAM,iEAAgBJ,MAAQ,IACzD,CAACO,GAAK,IAAKL,OAAS,qBAAOE,KAAM,+EAAoBJ,MAAQ,IAC7D,CAACO,GAAK,IAAKL,OAAS,MAAOE,KAAO,MAAOJ,MAAQ,KA2B1CQ,6MAtBbC,YAAc,WAUV,OATiBH,EAAMI,IAAI,SAAAN,GACvB,OACIX,EAAAC,EAAAC,cAACgB,EAAD,CACIT,OAAQE,EAAKF,OACbE,KAAMA,EAAKA,KACXJ,MAAOI,EAAKJ,MACZY,IAAKR,EAAKG,gFAOxB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAWU,EAAQ,MAAQ,gBACzBA,EAAQR,KAAKW,cAAgB,kBAlBxBJ,aCDEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91908b82.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Word.css';\r\n\r\nclass Word extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Word\">\r\n                <div className=\"Word__Column\">\r\n                    <img src={this.props.image} alt={this.props.writer} title={this.props.writer} className=\"Word__Image\" />\r\n                </div>\r\n                <div className=\"Word__Column\">\r\n                    <h1>{this.props.writer}</h1>\r\n                    <div className=\"Word__text\">\r\n                        {this.props.word}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Word;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Word from './Word'\r\n\r\n\r\nconst words =\r\n    [\r\n        {id : \"1\", writer : \"소크라테스\", word :\"너 자신을 알라\" ,image : \"https://pasteve.com/wp-content/uploads/2018/01/shutterstock_751011886-min.jpg\"},\r\n        {id : \"2\", writer : \"지각생\", word :\"늦었다하면 진짜 늦었다\" ,image : \"\"},\r\n        {id : \"3\", writer : \"회사원\", word :\"퇴근 시간은 내 마음속에 있다\" ,image : \"\"},\r\n        {id : \"4\", writer : \"???\", word : \"???\" ,image : \"\"}\r\n    ]\r\n\r\nclass App extends Component {\r\n\r\n  renderWords = () => {\r\n      const rendered = words.map(word => {\r\n          return (\r\n              <Word\r\n                  writer={word.writer}\r\n                  word={word.word}\r\n                  image={word.image}\r\n                  key={word.id}/>\r\n          );\r\n      });\r\n      return rendered;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={words ? \"App\" : \"App--loading\"}>\r\n            {words ? this.renderWords() : \"Loading\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}